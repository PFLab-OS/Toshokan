#!python
import random
import string
import os
Import('base_env containers')

hakase_flag = '-g -O0 -Wall -Werror=unused-result --std=c++14 -static -fno-pie -no-pie -D__HAKASE__ -T /usr/local/etc/hakase.ld'
friend_flag = '-g -O0 -Wall -Werror=unused-result --std=c++14 -nostdinc -nostdlib -fno-pie -no-pie -D__FRIEND__'
friend_elf_flag = friend_flag + ' -T /usr/local/etc/friend.ld'

hakase_include_path = []
friend_include_path = ['/usr/local/include']

def add_file_to_emitter(env, emitter_name, file):
  try:
    original_emitter = env[emitter_name]
    if type(original_emitter) == list:
      original_emitter = original_emitter[0]
  except KeyError:
    original_emitter = None
  def emitter(target, source, env):
    if original_emitter:
      target, source = original_emitter(target, source, env)
    env.Depends(target, file)
    return target, source
  env[emitter_name] = emitter
add_file_to_emitter(base_env, 'PROGEMITTER', [containers["build_hakase"], containers["build_friend"]])

def container_emitter(target, source, env):
  env.Depends(target, [containers["build_hakase"], containers["build_friend"]])
  return (target, source)

from SCons.Tool import createObjBuilders
static_obj, shared_obj = createObjBuilders(base_env)
static_obj.add_emitter('.cc', container_emitter)
static_obj.add_emitter('.c', container_emitter)
static_obj.add_emitter('.S', container_emitter)
static_obj.add_emitter('.o', container_emitter)
static_obj.add_emitter('.a', container_emitter)

hakase_test_env = base_env.Clone(AR='tests/bin/ar',
                            AS='tests/bin/hakase-g++',
                            CC='tests/bin/hakase-g++',
                            CXX='tests/bin/hakase-g++',
                            RANLIB='tests/bin/ranlib',
                            ASFLAGS=hakase_flag, CXXFLAGS=hakase_flag, LINKFLAGS=hakase_flag, CPPPATH=hakase_include_path)
friend_test_env = base_env.Clone(AR='tests/bin/ar',
                            AS='tests/bin/friend-g++',
                            CC='tests/bin/friend-g++',
                            CXX='tests/bin/friend-g++',
                            RANLIB='tests/bin/ranlib',
                            ASFLAGS=friend_flag, CXXFLAGS=friend_flag, LINKFLAGS=friend_flag, CPPPATH=friend_include_path, LIBPATH='/usr/local/lib64')
friend_test_elf_env = friend_test_env.Clone(ASFLAGS=friend_elf_flag, CXXFLAGS=friend_elf_flag, LINKFLAGS=friend_elf_flag)

cleanup_containers = AlwaysBuild(hakase_test_env.Alias('cleanup_containers', [], [
  'docker ps -a -f name=toshokan_qemu_ -q | xargs -L 1 docker rm -f || :',
]))

rootdir = Dir('#').abspath

def generate_test_alias(env, name, depends):
  random_str = ''.join(random.choice(string.ascii_letters) for i in range(10))
  qemu_option = ' '.join([
    '-cpu Haswell',
    '-s',
    '-d cpu_reset',
    '-no-reboot',
    '-smp 5',
    '-m 4G',
    '-D /qemu.log',
    '-loadvm snapshot1',
    '-hda /backing.qcow2',
    '-net nic',
    '-net user,hostfwd=tcp::2222-:22',
    '-serial telnet::4444,server,nowait',
    '-monitor telnet::4445,server,nowait',
    '-nographic',
    '-global hpet.msi=true',
  ])
  return hakase_test_env.AlwaysBuild(hakase_test_env.Alias('test_' + name, [cleanup_containers, containers["qemu"]] + depends, [
    'docker run -d --name toshokan_qemu_{0} -v {2}:{2} -w {2} {3}qemu qemu-system-x86_64 {1}'.format(random_str, qemu_option, rootdir, base_env["CONTAINER_PREFIX"]),
    'docker exec -i toshokan_qemu_{0} wait-for-rsync toshokan_qemu'.format(random_str),
    'docker exec -i toshokan_qemu_{0} rsync build/{1} toshokan_qemu:build/'.format(random_str, name),
    'docker exec -i toshokan_qemu_{0} ssh toshokan_qemu sudo build/{1}'.format(random_str, name),
    'docker rm -f toshokan_qemu_{0}'.format(random_str)]))
hakase_test_env.AddMethod(generate_test_alias, "GenerateTestAlias")

def generate_test_program(env, hakase_source, friend_source):
  name = os.path.basename(env.Dir('.').abspath)
  friend = friend_test_elf_env.Program(target='friend.bin', source=friend_source, LIBS=['friend', 'common'])
  friend_obj = friend_test_elf_env.Command('friend_bin.o', [friend],
      'bin/objcopy -I binary -O elf64-x86-64 -B i386:x86-64 --rename-section .data=friend_bin $SOURCES $TARGET')
  friend_symbols = friend_test_elf_env.Command('friend.sym', [friend],
      'bin/objcopy --prefix-symbols=friendsymbol_ $SOURCES $TARGET')

  target = env.Program(target='#build/' + name, source=[friend_obj] + hakase_source, LIBS=['hakase', 'common'], LINKFLAGS=env['LINKFLAGS'] + ' -Wl,-R,' + friend_symbols[0].path)
  env.Depends(target, friend_symbols)

  test_binary = env.GenerateTestAlias(name, target)
  return test_binary

hakase_test_env.AddMethod(generate_test_program, "TestProgram")
hakase_test_env.Object('main.o', 'main.cc')

Export('hakase_test_env friend_test_env')
test_targets = list(SConscript(dirs=[
  'elf',
  'clang',
  'symbol',
  'offload',
  ]))

test = AlwaysBuild(hakase_test_env.Alias('test', ['common_test'] + test_targets))
Return('test')
